Due to the pyramid structure of company/corporate, trusting a single department or a single person to handle such data is really naive and not really secure.
This proposed solutions here can be used to partially reduce insider's attack or hacker's attack in this particular scenario given by the fact that NDA(Non Disclosure Agreement)
is likely not going to work.

Proposed Solution explanation:
1. In the first non-corporate based scenario, all powers are handled by one single person or entity(client side). This do means that login,uploading locally signed
   (digital signature) encrypted files is likely to be really easy for hacker to crack the security system as the target is only a single staff in the company/corporate.
2. In order to make this extremely hard for insider's attack to be performed, instead of giving power to only a single entity, multiple entity and multiple staffs in the company
   must cooperate with each other and don't fall victim to usual client based cyber attacks such as phishing and social engineering.
3. If all staffs and managers in a company/corporate can cooperate with each other on basic client based cyber attacks, then multiple unknown amount of staffs and managers(decide
   by the company/corporate) can register an account separately and linked to the corporate/company main account, this way, this will form a decentralize login mechanism which
   requires all selected entities to be present to be able to login.
4. The same can be said for encrypting/decrypting the files as well, each selected entities among all staffs in corporate/company will be required to be present to be able to
   encrypt and decrypt the files locally.

Proposed Solution drawbacks(cryptographic digital signature key centralization):
1. Even though the decentralization of digital signature private/secret keys that generate by each selected entity in a company is secured enough, but I do believe that certain
   company/corporate will want to merge the digital signature secret/private keys into one master secret/private key. The potential formula of such master digital signature secret
   /private key is as follow:
   a. S= staffs
   b. n= number
   c. I= infinity
   d. KDF = Key Derivation Function
   e. || = Combine/Concat
   f. SK = Digital Signature Keypair's secret key

   A. Master digital signature private/secret key= KDF(Sn1_SK||Sn2_SK||Sn3_SK||.....||SnI_SK)
   
   This alone might not be a problem but the problem is on the device that performs this particular formula to generate such master digital signature private key, for a second,
   let's assume that the device is an intranet server, is the intranet server compromised? is the intranet server not secure? is the staff who guards that particular intranet
   server trustable? is the code really from trusted source? These concerns must be taken if they(company/corporate) require the key momentarily centralize. For hackers that are
   not within the company, if the company/corporate done right on centralizing the key, the amount of time to either brute force the potential master digital signature private key
   through generated master digital signature public key through the given public formula or they can also brute force the corresponding
   digital signature private key without the use of the given public formula is too time consuming (Before Quantum Computer becomes commonly available).

[Stream Cipher based symmetric encryption/decryption]
Proposed Solution drawbacks(cryptographic symmetric key centralization without relying on message confusing technique used by TOR or Onion):
1. Unlike cryptographic digital signature key centralization, symmetric key are often used to encrypt data due to its fast speed compared to asymmetric keys and able to have a
   cryptographic property like perfect forward secrecy, often the case the file is encrypted with a single symmetric key. Similar approach to how digital signature master
   secret key was created can be applied to create a momentarily centralized master symmetric key. The problem here is slightly different, even though it's intranet, trusts
   are needed to transfer the symmetric keys generated by selected trusted staffs either by using or not using a certificate through modern diffie hellman handshake with a
   centralized intranet server. The problem here is simply the trusts issues on the selected intranet server,the staffs who guard the server and whether the code has not been
   modified maliciously. The hacker and insider if they know which intranet server was used, they can simply hack into the intranet server and gets the master symmetric key
   used to decrypt/encrypt the file.
1a. Speed is consider slow as all keys need to be delivered to selected trusted intranet server before encryption/decryption of file can take place. 

Proposed solution drawbacks(cryptographic symmetric key decentralization with relying on message confusing technique used by TOR or Onion)
1. After the encrypted file are fetched by any of the untrusted intranet server, in theory because the intranet server does not hold any of the decentralized symmetric keys, the
   decryption can't be done on the intranet server but the typical Onion/Tor drawbacks can be applied here which is attacks can be performed on the first node that encrypts the
   messages. The typical drawbacks on using onion to decrypt/encrypt data is typically a problem that's unsolvable.
1a. Speed is consider slowest as decryption takes place on nodes rather than on intranet server.

[Block cipher based symmetric encryption/decryption]
1. Regardless of which proposed solutions used because the fact that block cipher won't change the message size(lack of MAC[Message Authentication Code]), the encrypted file in
   theory won't affect its length. The drawbacks still applied by the drawbacks mentioned by stream cipher based symmetric encryption/decryption.
